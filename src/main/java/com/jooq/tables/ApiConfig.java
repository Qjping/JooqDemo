/*
 * This file is generated by jOOQ.
 */
package com.jooq.tables;


import com.jooq.Apitest;
import com.jooq.Keys;
import com.jooq.tables.records.ApiConfigRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiConfig extends TableImpl<ApiConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>apitest.api_config</code>
     */
    public static final ApiConfig API_CONFIG = new ApiConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiConfigRecord> getRecordType() {
        return ApiConfigRecord.class;
    }

    /**
     * The column <code>apitest.api_config.id</code>.
     */
    public final TableField<ApiConfigRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apitest.api_config.url</code>.
     */
    public final TableField<ApiConfigRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>apitest.api_config.headers</code>.
     */
    public final TableField<ApiConfigRecord, String> HEADERS = createField(DSL.name("headers"), SQLDataType.CLOB, this, "");

    private ApiConfig(Name alias, Table<ApiConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiConfig(Name alias, Table<ApiConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>apitest.api_config</code> table reference
     */
    public ApiConfig(String alias) {
        this(DSL.name(alias), API_CONFIG);
    }

    /**
     * Create an aliased <code>apitest.api_config</code> table reference
     */
    public ApiConfig(Name alias) {
        this(alias, API_CONFIG);
    }

    /**
     * Create a <code>apitest.api_config</code> table reference
     */
    public ApiConfig() {
        this(DSL.name("api_config"), null);
    }

    public <O extends Record> ApiConfig(Table<O> child, ForeignKey<O, ApiConfigRecord> key) {
        super(child, key, API_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return Apitest.APITEST;
    }

    @Override
    public UniqueKey<ApiConfigRecord> getPrimaryKey() {
        return Keys.KEY_API_CONFIG_PRIMARY;
    }

    @Override
    public List<UniqueKey<ApiConfigRecord>> getKeys() {
        return Arrays.<UniqueKey<ApiConfigRecord>>asList(Keys.KEY_API_CONFIG_PRIMARY);
    }

    @Override
    public ApiConfig as(String alias) {
        return new ApiConfig(DSL.name(alias), this);
    }

    @Override
    public ApiConfig as(Name alias) {
        return new ApiConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiConfig rename(String name) {
        return new ApiConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiConfig rename(Name name) {
        return new ApiConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
