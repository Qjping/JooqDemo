/*
 * This file is generated by jOOQ.
 */
package com.jooq.tables;


import com.jooq.Apitest;
import com.jooq.Keys;
import com.jooq.tables.records.CaseDetailRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CaseDetail extends TableImpl<CaseDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>apitest.case_detail</code>
     */
    public static final CaseDetail CASE_DETAIL = new CaseDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseDetailRecord> getRecordType() {
        return CaseDetailRecord.class;
    }

    /**
     * The column <code>apitest.case_detail.id</code>.
     */
    public final TableField<CaseDetailRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>apitest.case_detail.url</code>.
     */
    public final TableField<CaseDetailRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>apitest.case_detail.path</code>.
     */
    public final TableField<CaseDetailRecord, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>apitest.case_detail.header</code>.
     */
    public final TableField<CaseDetailRecord, String> HEADER = createField(DSL.name("header"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>apitest.case_detail.method</code>.
     */
    public final TableField<CaseDetailRecord, String> METHOD = createField(DSL.name("method"), SQLDataType.CHAR(10), this, "");

    /**
     * The column <code>apitest.case_detail.data</code>.
     */
    public final TableField<CaseDetailRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>apitest.case_detail.assertions</code>.
     */
    public final TableField<CaseDetailRecord, String> ASSERTIONS = createField(DSL.name("assertions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>apitest.case_detail.extract</code>.
     */
    public final TableField<CaseDetailRecord, String> EXTRACT = createField(DSL.name("extract"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>apitest.case_detail.description</code>.
     */
    public final TableField<CaseDetailRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>apitest.case_detail.create_time</code>. 创建时间
     */
    public final TableField<CaseDetailRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>apitest.case_detail.update_time</code>. 修改时间
     */
    public final TableField<CaseDetailRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "修改时间");

    /**
     * The column <code>apitest.case_detail.group_id</code>.
     */
    public final TableField<CaseDetailRecord, String> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.VARCHAR(32), this, "");

    private CaseDetail(Name alias, Table<CaseDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private CaseDetail(Name alias, Table<CaseDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>apitest.case_detail</code> table reference
     */
    public CaseDetail(String alias) {
        this(DSL.name(alias), CASE_DETAIL);
    }

    /**
     * Create an aliased <code>apitest.case_detail</code> table reference
     */
    public CaseDetail(Name alias) {
        this(alias, CASE_DETAIL);
    }

    /**
     * Create a <code>apitest.case_detail</code> table reference
     */
    public CaseDetail() {
        this(DSL.name("case_detail"), null);
    }

    public <O extends Record> CaseDetail(Table<O> child, ForeignKey<O, CaseDetailRecord> key) {
        super(child, key, CASE_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return Apitest.APITEST;
    }

    @Override
    public Identity<CaseDetailRecord, Integer> getIdentity() {
        return (Identity<CaseDetailRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CaseDetailRecord> getPrimaryKey() {
        return Keys.KEY_CASE_DETAIL_PRIMARY;
    }

    @Override
    public List<UniqueKey<CaseDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<CaseDetailRecord>>asList(Keys.KEY_CASE_DETAIL_PRIMARY);
    }

    @Override
    public CaseDetail as(String alias) {
        return new CaseDetail(DSL.name(alias), this);
    }

    @Override
    public CaseDetail as(Name alias) {
        return new CaseDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseDetail rename(String name) {
        return new CaseDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseDetail rename(Name name) {
        return new CaseDetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
