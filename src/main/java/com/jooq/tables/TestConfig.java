/*
 * This file is generated by jOOQ.
 */
package com.jooq.tables;


import com.jooq.Apitest;
import com.jooq.Keys;
import com.jooq.tables.records.TestConfigRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestConfig extends TableImpl<TestConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>apitest.test_config</code>
     */
    public static final TestConfig TEST_CONFIG = new TestConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestConfigRecord> getRecordType() {
        return TestConfigRecord.class;
    }

    /**
     * The column <code>apitest.test_config.id</code>.
     */
    public final TableField<TestConfigRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>apitest.test_config.base_header</code>.
     */
    public final TableField<TestConfigRecord, String> BASE_HEADER = createField(DSL.name("base_header"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>apitest.test_config.base_url</code>.
     */
    public final TableField<TestConfigRecord, String> BASE_URL = createField(DSL.name("base_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>apitest.test_config.create_time</code>.
     */
    public final TableField<TestConfigRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>apitest.test_config.group_id</code>.
     */
    public final TableField<TestConfigRecord, String> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>apitest.test_config.update_time</code>.
     */
    public final TableField<TestConfigRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>apitest.test_config.user_define_param</code>.
     */
    public final TableField<TestConfigRecord, String> USER_DEFINE_PARAM = createField(DSL.name("user_define_param"), SQLDataType.VARCHAR(255), this, "");

    private TestConfig(Name alias, Table<TestConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestConfig(Name alias, Table<TestConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>apitest.test_config</code> table reference
     */
    public TestConfig(String alias) {
        this(DSL.name(alias), TEST_CONFIG);
    }

    /**
     * Create an aliased <code>apitest.test_config</code> table reference
     */
    public TestConfig(Name alias) {
        this(alias, TEST_CONFIG);
    }

    /**
     * Create a <code>apitest.test_config</code> table reference
     */
    public TestConfig() {
        this(DSL.name("test_config"), null);
    }

    public <O extends Record> TestConfig(Table<O> child, ForeignKey<O, TestConfigRecord> key) {
        super(child, key, TEST_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return Apitest.APITEST;
    }

    @Override
    public UniqueKey<TestConfigRecord> getPrimaryKey() {
        return Keys.KEY_TEST_CONFIG_PRIMARY;
    }

    @Override
    public List<UniqueKey<TestConfigRecord>> getKeys() {
        return Arrays.<UniqueKey<TestConfigRecord>>asList(Keys.KEY_TEST_CONFIG_PRIMARY);
    }

    @Override
    public TestConfig as(String alias) {
        return new TestConfig(DSL.name(alias), this);
    }

    @Override
    public TestConfig as(Name alias) {
        return new TestConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestConfig rename(String name) {
        return new TestConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestConfig rename(Name name) {
        return new TestConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
